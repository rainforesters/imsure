"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[671],{1911:(n,s,a)=>{a.r(s),a.d(s,{data:()=>t});const t={key:"v-744497ce",path:"/api/",title:"API",lang:"en-US",frontmatter:{title:"API",sidebar:"auto",sidebarDepth:2},excerpt:"",headers:[{level:2,title:"函数",slug:"函数",children:[{level:3,title:"typedef",slug:"typedef",children:[]},{level:3,title:"typeinit",slug:"typeinit",children:[]},{level:3,title:"structbody",slug:"structbody",children:[]},{level:3,title:"structof",slug:"structof",children:[]},{level:3,title:"ruledef",slug:"ruledef",children:[]},{level:3,title:"outcome",slug:"outcome",children:[]},{level:3,title:"change",slug:"change",children:[]},{level:3,title:"wrapval",slug:"wrapval",children:[]}]},{level:2,title:"基本类型",slug:"基本类型",children:[{level:3,title:"unknown",slug:"unknown",children:[]},{level:3,title:"bool",slug:"bool",children:[]},{level:3,title:"int32",slug:"int32",children:[]},{level:3,title:"float64",slug:"float64",children:[]},{level:3,title:"string",slug:"string",children:[]}]},{level:2,title:"Struct",slug:"struct",children:[]},{level:2,title:"内置类型",slug:"内置类型",children:[{level:3,title:"object",slug:"object",children:[]},{level:3,title:"array",slug:"array",children:[]},{level:3,title:"CArray",slug:"carray",children:[]}]}],filePathRelative:"api/README.md",git:{updatedTime:1630234208e3}}},9062:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const t=(0,a(6252).uE)('<h2 id="函数" tabindex="-1"><a class="header-anchor" href="#函数" aria-hidden="true">#</a> 函数</h2><h3 id="typedef" tabindex="-1"><a class="header-anchor" href="#typedef" aria-hidden="true">#</a> typedef</h3><p>定义一个新的类型描述</p><p><strong>Signature:</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span><span class="token generic-function"><span class="token function">def</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  <span class="token constant">T</span>\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  desc<span class="token operator">:</span> Desc<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  tdesc<span class="token operator">?</span><span class="token operator">:</span> _typedef_<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> _typedef_<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>Parameters:</strong></p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>desc</td><td>T</td><td>描述类型的规则和结构</td></tr><tr><td>tdesc</td><td>_typedef_&lt;T&gt;</td><td>适用于先声明空的 Struct，然后再定义全部字段</td></tr></tbody></table><p><strong>Returns:</strong> _typedef_&lt;T&gt;</p><p><strong>Example 1</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Example 2</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 类型别名</span>\n<span class="token keyword">type</span> <span class="token class-name">Person</span> <span class="token operator">=</span> TypeDesc<span class="token operator">&lt;</span>\n  Struct<span class="token operator">&lt;</span><span class="token punctuation">{</span>\n    name<span class="token operator">:</span> TypeDesc<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span>\n    sex<span class="token operator">:</span> TypeDesc<span class="token operator">&lt;</span>bool<span class="token operator">&gt;</span>\n    cosplay<span class="token operator">:</span> Person\n  <span class="token punctuation">}</span><span class="token operator">&gt;</span>\n<span class="token operator">&gt;</span>\n<span class="token comment">// 先声明空的 Struct</span>\n<span class="token keyword">const</span> Person<span class="token operator">:</span> Person <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n    cosplay<span class="token operator">:</span> Person<span class="token punctuation">,</span> <span class="token comment">// 自引用</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Person\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br></div></div><h3 id="typeinit" tabindex="-1"><a class="header-anchor" href="#typeinit" aria-hidden="true">#</a> typeinit</h3><p>从类型描述生成默认值</p><p><strong>Signature:</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">type</span><span class="token generic-function"><span class="token function">init</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> TypeDesc<span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span>\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  tdesc<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  literal<span class="token operator">?</span><span class="token operator">:</span> literal<span class="token operator">&lt;</span><span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>Parameters:</strong></p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>tdesc</td><td>T</td><td>类型描述</td></tr><tr><td>literal</td><td>literal&lt;typeinit&lt;T&gt;&gt;</td><td>指定明确的字面值</td></tr></tbody></table><p><strong>Returns:</strong> typeinit&lt;T&gt;</p><p><strong>Example</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> Ron <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>\n<span class="token comment">// result: { name: &#39;&#39;, sex: false }</span>\nRon<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Ron&#39;</span>\n<span class="token comment">// result: { name: &#39;Ron&#39;, sex: false }</span>\n\n<span class="token keyword">const</span> Hermione <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Person<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Hermione&#39;</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// result: { name: &#39;Hermione&#39;, sex: true }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><h3 id="structbody" tabindex="-1"><a class="header-anchor" href="#structbody" aria-hidden="true">#</a> structbody</h3><p>返回结构体的所有字段</p><p><strong>Signature:</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">structbody</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> TypeDesc<span class="token operator">&lt;</span>Struct<span class="token operator">&lt;</span>StructTypeDesc<span class="token operator">&gt;&gt;</span>\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  tdesc<span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> _structbody_<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Parameters:</strong></p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>tdesc</td><td>T</td><td>结构体的类型描述</td></tr></tbody></table><p><strong>Returns:</strong> _structbody_&lt;T&gt;</p><h3 id="structof" tabindex="-1"><a class="header-anchor" href="#structof" aria-hidden="true">#</a> structof</h3><p>返回结构体实例的类型描述</p><p><strong>Signature:</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">structof</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> Struct<span class="token operator">&lt;</span>StructType<span class="token operator">&gt;</span>\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  struct<span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> structof<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p><strong>Parameters:</strong></p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>struct</td><td>T</td><td>结构体实例</td></tr></tbody></table><p><strong>Returns:</strong> structof&lt;T&gt;</p><h3 id="ruledef" tabindex="-1"><a class="header-anchor" href="#ruledef" aria-hidden="true">#</a> ruledef</h3><p>定义规则</p><p><strong>Signature:</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">ruledef</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  <span class="token constant">T</span> <span class="token keyword">extends</span> TypeDesc<span class="token operator">&lt;</span>Struct<span class="token operator">&lt;</span>StructTypeDesc<span class="token operator">&gt;&gt;</span>\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  tdesc<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">,</span>\n  observe<span class="token operator">:</span> observe<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  <span class="token function-variable function">executor</span><span class="token operator">:</span> <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token builtin">unknown</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p><strong>Parameters:</strong></p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>tdesc</td><td>T</td><td>类型描述</td></tr><tr><td>name</td><td>unknown</td><td>规则名</td></tr><tr><td>observe</td><td>observe&lt;T&gt;</td><td>描述需要观察的字段规则</td></tr><tr><td>executor</td><td>(self: typeinit&lt;T&gt;) =&gt; unknown</td><td>当待观察的字段符合描述的规则时执行该规则</td></tr></tbody></table><p><strong>Returns:</strong> void</p><p><strong>Example</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Person <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n  intro<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 期望当名字、性别发生变化时，自动生成个人介绍</span>\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  Person<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Person<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token comment">// 此时，预期的名字、性别发生变化了，</span>\n<span class="token comment">// 将会自动执行规则，生成个人介绍。</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output: My name is Amy, I am a girl.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h3 id="outcome" tabindex="-1"><a class="header-anchor" href="#outcome" aria-hidden="true">#</a> outcome</h3><p>获取预期规则执行的结果</p><p><strong>Signature:</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">outcome</span><span class="token punctuation">(</span>\n  struct<span class="token operator">:</span> Struct<span class="token operator">&lt;</span>StructType<span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">unknown</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token builtin">unknown</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p><strong>Parameters:</strong></p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>struct</td><td>Struct&lt;StructType&gt;</td><td>结构体实例</td></tr><tr><td>name</td><td>unknown</td><td>规则名，如果未指定则默认获取第一个规则</td></tr></tbody></table><p><strong>Returns:</strong> Promise&lt;unknown&gt;</p><p><strong>Example</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 期望当名字、性别发生变化时，自动生成个人介绍</span>\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  Person<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> Person<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Person<span class="token punctuation">)</span>\n<span class="token comment">// 先预期需要获取的结果</span>\n<span class="token keyword">const</span> asyncResult <span class="token operator">=</span> <span class="token function">outcome</span><span class="token punctuation">(</span>myself<span class="token punctuation">,</span> <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token comment">// 此时，预期的名字、性别发生变化了，</span>\n<span class="token comment">// 将会自动执行规则，生成个人介绍。</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">await</span> asyncResult<span class="token punctuation">)</span>\n<span class="token comment">// output: My name is Amy, I am a girl.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div><h3 id="change" tabindex="-1"><a class="header-anchor" href="#change" aria-hidden="true">#</a> change</h3><p>手动管理数据内部变动情况（适用于 Array Set Map 等）</p><p><strong>Signature:</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">change</span><span class="token punctuation">(</span>\n  obj<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">any</span><span class="token punctuation">,</span> <span class="token builtin">any</span><span class="token operator">&gt;</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> <span class="token keyword">void</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>Parameters:</strong></p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>obj</td><td>Record&lt;any, any&gt;</td><td>包含内部数据的任意对象</td></tr></tbody></table><p><strong>Returns:</strong> void</p><h3 id="wrapval" tabindex="-1"><a class="header-anchor" href="#wrapval" aria-hidden="true">#</a> wrapval</h3><p>使用描述来包装值</p><p><strong>Signature:</strong></p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token generic-function"><span class="token function">wrapval</span><span class="token generic class-name"><span class="token operator">&lt;</span>\n  <span class="token constant">T</span>\n<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span>\n  desc<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  val<span class="token operator">?</span><span class="token operator">:</span> <span class="token constant">T</span>\n<span class="token punctuation">)</span><span class="token operator">:</span> Readonly<span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p><strong>Parameters:</strong></p><table><thead><tr><th>Parameter</th><th>Type</th><th>Description</th></tr></thead><tbody><tr><td>desc</td><td>Record&lt;string, unknown&gt;</td><td>描述说明</td></tr><tr><td>val</td><td>T</td><td>被包装的值</td></tr></tbody></table><p><strong>Returns:</strong> Readonly&lt;T&gt;</p><h2 id="基本类型" tabindex="-1"><a class="header-anchor" href="#基本类型" aria-hidden="true">#</a> 基本类型</h2><h3 id="unknown" tabindex="-1"><a class="header-anchor" href="#unknown" aria-hidden="true">#</a> unknown</h3><h3 id="bool" tabindex="-1"><a class="header-anchor" href="#bool" aria-hidden="true">#</a> bool</h3><h3 id="int32" tabindex="-1"><a class="header-anchor" href="#int32" aria-hidden="true">#</a> int32</h3><h3 id="float64" tabindex="-1"><a class="header-anchor" href="#float64" aria-hidden="true">#</a> float64</h3><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string" aria-hidden="true">#</a> string</h3><h2 id="struct" tabindex="-1"><a class="header-anchor" href="#struct" aria-hidden="true">#</a> Struct</h2><p>结构体就是由一个或多个字段组成的集合。<br> 这是一个抽象的类型，需要定义新的结构体才行。</p><h2 id="内置类型" tabindex="-1"><a class="header-anchor" href="#内置类型" aria-hidden="true">#</a> 内置类型</h2><h3 id="object" tabindex="-1"><a class="header-anchor" href="#object" aria-hidden="true">#</a> object</h3><h3 id="array" tabindex="-1"><a class="header-anchor" href="#array" aria-hidden="true">#</a> array</h3><h3 id="carray" tabindex="-1"><a class="header-anchor" href="#carray" aria-hidden="true">#</a> CArray</h3><p>使用 <a href="#change">change</a> 和 <code>Proxy</code> 实现的自动同步元素变更的数组。</p>',80),e={render:function(n,s){return t}}}}]);