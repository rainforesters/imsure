"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[324],{8994:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-10ca0db8",path:"/guide/struct.html",title:"Struct 类型",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"初识",slug:"初识",children:[]},{level:2,title:"模拟数据",slug:"模拟数据",children:[]},{level:2,title:"自动化",slug:"自动化",children:[]},{level:2,title:"定义规则",slug:"定义规则",children:[]},{level:2,title:"执行规则",slug:"执行规则",children:[]},{level:2,title:"观察子结构体",slug:"观察子结构体",children:[]},{level:2,title:"待观察的字段描述",slug:"待观察的字段描述",children:[]},{level:2,title:"@notnil",slug:"notnil",children:[]},{level:2,title:"@diff",slug:"diff",children:[]},{level:2,title:"@or",slug:"or",children:[]},{level:2,title:"同时使用多个规则",slug:"同时使用多个规则",children:[]},{level:2,title:"outcome",slug:"outcome",children:[]},{level:2,title:"structbody",slug:"structbody",children:[]},{level:2,title:"structof",slug:"structof",children:[]},{level:2,title:"自引用的结构体",slug:"自引用的结构体",children:[]},{level:2,title:"在修饰结构体上定义规则",slug:"在修饰结构体上定义规则",children:[]},{level:2,title:"继承 & 组合 & 扩展",slug:"继承-组合-扩展",children:[]},{level:2,title:"在实例上定义规则",slug:"在实例上定义规则",children:[]},{level:2,title:"字段类型描述符",slug:"字段类型描述符",children:[]},{level:2,title:"@noinit",slug:"noinit",children:[]},{level:2,title:"@retain & @release",slug:"retain-release",children:[]},{level:2,title:"@class",slug:"class",children:[]},{level:2,title:"@change",slug:"change",children:[]}],filePathRelative:"guide/struct.md",git:{updatedTime:1630234208e3}}},7886:(n,s,a)=>{a.r(s),a.d(s,{default:()=>W});var p=a(6252);const t=(0,p.uE)('<h1 id="struct-类型" tabindex="-1"><a class="header-anchor" href="#struct-类型" aria-hidden="true">#</a> Struct 类型</h1><p>这是一个简单又内涵丰富的类型。<br> 简单来讲，是由一个或多个字段组成的集合。<br><strong>毫不客气的讲，这是数据结构化编程的灵魂。</strong></p><h2 id="初识" tabindex="-1"><a class="header-anchor" href="#初识" aria-hidden="true">#</a> 初识</h2><p>我们可以很方便的定义它。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>类型定义之后，我们需要初始化其实例，就可以使用了。<br> 初始化结构体时，所有字段都会自动初始化为类型的默认值。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">)</span>\n<span class="token comment">// output: { name: &#39;&#39;, sex: false }</span>\n\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>这样，我们就得到了由安全字段类型组成的结构体实例。<br> 之后为字段的每次赋值都自动校验，这样就保障了整体的安全性。</p><p>我们也可以在初始化的同时为字段赋值。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Amy&#39;</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><p>另一个好用的是，我们可以直接初始化完整的结构体，包括子结构体。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n  contact<span class="token operator">:</span> Contact<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">)</span>\n<span class="token comment">// output: { name: &#39;&#39;, sex: false, contact: { phone: &#39;&#39;, email: &#39;&#39; } }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><p>如果不想初始化子结构体，那么也很容易。或者使用 <a href="#noinit">@noinit</a> 描述符。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  contact<span class="token operator">:</span> <span class="token keyword">null</span><span class="token operator">!</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">)</span>\n<span class="token comment">// output: { name: &#39;&#39;, sex: false, contact: null }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><h2 id="模拟数据" tabindex="-1"><a class="header-anchor" href="#模拟数据" aria-hidden="true">#</a> 模拟数据</h2>',15),e=(0,p.Uk)("由于我们日常编程中，经常需要用到模拟数据。"),o=(0,p._)("br",null,null,-1),c=(0,p.Uk)(" 所以借助于前面学习的 "),l=(0,p.Uk)("@mock"),u=(0,p.Uk)(" 描述符，我们可以很容易的生成模拟数据。"),r=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;@type&#39;</span><span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;@mock&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span> <span class="token operator">?</span> <span class="token string">&#39;Amy&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;Ron&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;@type&#39;</span><span class="token operator">:</span> bool<span class="token punctuation">,</span>\n    <span class="token string">&#39;@mock&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&gt;</span> <span class="token number">0.5</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;@type&#39;</span><span class="token operator">:</span> int32<span class="token punctuation">,</span>\n    <span class="token string">&#39;@mock&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 我们使用 wrapval({ &#39;@mock&#39;: true }) 来生成模拟的数据</span>\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">,</span> <span class="token function">wrapval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&#39;@mock&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>如果我们并不想模拟全部字段，那么可以在初始化的同时为字段赋值。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token function">wrapval</span><span class="token punctuation">(</span>\n    <span class="token punctuation">{</span> <span class="token string">&#39;@mock&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token string">&#39;Amy&#39;</span><span class="token punctuation">,</span>\n      sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div><p>或者仅在某些字段上模拟。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Amy&#39;</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token function">wrapval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&#39;@mock&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>上面两个示例效果是相同的，只有 <code>age</code> 字段是模拟的。</p><h2 id="自动化" tabindex="-1"><a class="header-anchor" href="#自动化" aria-hidden="true">#</a> 自动化</h2><p>现在，我们得到了结构化的由安全字段类型组成的集合。<br> 接下来，我们赋予其自动化编程的能力。<br> 由此，我们便实现了结构、安全、自动化的数据结构化编程。</p><h2 id="定义规则" tabindex="-1"><a class="header-anchor" href="#定义规则" aria-hidden="true">#</a> 定义规则</h2><p>在保证结构体概念纯粹性的情况下，我们采用定义规则来实现自动化。<br> 这样我们就能依旧按原有的简单方式来使用结构体。<br> 所以我们认知到，结构体上只有字段，并且一直都是只有字段，这就是简单纯粹性。</p>',10),i=(0,p.Uk)("使用 "),k={href:"/api/#ruledef",target:"_blank",rel:"noopener noreferrer"},b=(0,p.Uk)("ruledef"),m=(0,p.Uk)(" 来定义规则。"),d=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n  intro<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token comment">// 定义规则</span>\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span> <span class="token comment">// 规则名（可以理解为函数名）</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// 待观察的字段描述（可以理解为参数）</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 执行规则的具体实现，可以理解为函数体</span>\n    <span class="token comment">// 结构体的字段值，可以理解为函数返回值</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div><p>这和普通函数由名称、参数、函数体、返回值几部分组成的原理一样。<br> 其中函数名，我们换成了规则名。<br> 参数部分，我们换成了 <strong>待观察的字段描述</strong> 这一个新的概念。<br> 返回值，我们换成了结构体的字段值。</p><p>我们需要简单讲一下原理，来了解规则的行为方式。</p><p>首先，我们的规则是定义于结构体上的，我们使用结构体的字段来作为参数。<br> 那么问题来了，什么时候执行规则呢？当然是参数全部传入的时候。<br> 问题二，怎么算是参数传入呢？字段赋值就是参数传入。<br> 所以，当待观察的字段都被赋值时，就会自动执行规则。<br> 我们由此也能获知一个特性，就是参数传入不依赖于顺序。这个概念也很重要。<br> 这样我们就容易理解了：<strong>当预期的字段数据都准备好时，会自动执行规则。</strong></p><div class="custom-container tip"><p class="custom-container-title">提示</p><p>这就方便让我们的思维方式转变成：<strong>为结构体填充数据，就能获得结果。</strong><br> 编程就是填充数据。是不是豁然开朗了。</p></div><h2 id="执行规则" tabindex="-1"><a class="header-anchor" href="#执行规则" aria-hidden="true">#</a> 执行规则</h2><p>我们不需要明确指定执行某一规则，我们只需要为结构体的字段赋值。<br> 如果规则应该执行，那么它就会在合适的时机执行。一切都是自动化的。</p><p>所以我们对结构体的唯一操作就是为字段赋值。这保持了操作的单一性。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token comment">// name 和 sex 被赋值，会自动执行 generateIntroduction 生成个人介绍</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output: My name is Amy, I am a girl.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><p>只要输入数据都准备好了，那么就能获得输出数据。<br> 这让我们无需思考背后的逻辑复杂性，只需要关注于输入和输出的结果。减少了许多心智负担。</p><h2 id="观察子结构体" tabindex="-1"><a class="header-anchor" href="#观察子结构体" aria-hidden="true">#</a> 观察子结构体</h2><p>这是一个独具魅力的设计方案。<br> 我们不单能观察结构体的直接字段，也能观察到子结构体的字段。<br> 这赋予了我们强大的操控能力。我们会经常使用到。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n  contact<span class="token operator">:</span> Contact<span class="token punctuation">,</span>\n  intro<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    contact<span class="token operator">:</span> <span class="token punctuation">{</span>\n      phone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      email<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      self<span class="token punctuation">.</span>intro <span class="token operator">+=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">\nMy phone number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>phone<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and email is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\nmyself<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>\nmyself<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">&#39;xxx&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output:</span>\n<span class="token comment">// My name is Amy, I am a girl.</span>\n<span class="token comment">// My phone number is xxx and email is xxx.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br></div></div><p>我们直接赋值新的子结构体，这也就意味着子结构体的字段全部发生变化。<br> 这两个示例的效果是相同的。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="待观察的字段描述" tabindex="-1"><a class="header-anchor" href="#待观察的字段描述" aria-hidden="true">#</a> 待观察的字段描述</h2><p>用来描述需要观察结构体上的哪些字段。也包括子结构体的字段。</p><p>另外，我们也提供了几个描述符，可以描述字段的特殊行为。</p><h2 id="notnil" tabindex="-1"><a class="header-anchor" href="#notnil" aria-hidden="true">#</a> @notnil</h2><p>用来表明该字段不能为空，也就是只有赋值不为空时，才算满足赋值条件。<br> 这让我们能在规则实现里安全的使用字段。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    contact<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">&#39;@notnil&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 表明 contact 不能为空，所以规则实现里可以安全使用该字段。</span>\n      phone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      email<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.\nMy phone number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>phone<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and email is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span>\n<span class="token comment">// 此时尚未执行生成个人介绍的规则，</span>\n<span class="token comment">// intro 依然为空，因为 contact 未被有效赋值</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 此时 contact 才算被赋值，生成个人介绍</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output:</span>\n<span class="token comment">// My name is Amy, I am a girl.</span>\n<span class="token comment">// My phone number is xxx and email is xxx.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>这样，即使子结构体暂时还不存在，我们也能提前预设条件，能够极大方便编程。<br> 一旦子结构体被赋值，那么就会满足条件，执行规则。所有都按照预期正常执行。</p><h2 id="diff" tabindex="-1"><a class="header-anchor" href="#diff" aria-hidden="true">#</a> @diff</h2><p>用来忽略相同的赋值，也就是只有赋值不同时，才算满足赋值条件。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&#39;@diff&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    contact<span class="token operator">:</span> <span class="token punctuation">{</span>\n      phone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      email<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.\nMy phone number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>phone<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and email is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output:</span>\n<span class="token comment">// My name is Amy, I am a girl.</span>\n<span class="token comment">// My phone number is xxx and email is xxx.</span>\n\nmyself<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> myself<span class="token punctuation">.</span>contact\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">false</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\n<span class="token comment">// 此时 intro 依然为空，因为 name 的值没有改变</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Ron&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output:</span>\n<span class="token comment">// My name is Ron, I am a boy.</span>\n<span class="token comment">// My phone number is xxx and email is xxx.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>如果应用于子结构体上，那么有两种情况。</p><p>情况一，若未观察子结构体的字段，那么必须赋值不同的子结构体才算赋值。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  contact<span class="token operator">:</span> Contact<span class="token punctuation">,</span>\n  intro<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    contact<span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token string">&#39;@diff&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My phone number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>phone<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and email is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output: My phone number is xxx and email is xxx.</span>\n\nmyself<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> myself<span class="token punctuation">.</span>contact\n<span class="token comment">// 此时 intro 依然为空，因为 contact 未改变</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token string">&#39;***&#39;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&#39;***&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output: My phone number is *** and email is ***.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div><p>情况二，如果也观察了子结构体的字段，那么除了必须赋值不同的结构体外，子结构体内部的字段改变也算是整个子结构体发生改变。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    contact<span class="token operator">:</span> <span class="token punctuation">{</span>\n      <span class="token string">&#39;@diff&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      phone<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      email<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My phone number is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>phone<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and email is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>email<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Contact<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  phone<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token string">&#39;xxx&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output: My phone number is xxx and email is xxx.</span>\n\nmyself<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>\n\nmyself<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>phone <span class="token operator">=</span> <span class="token string">&#39;***&#39;</span>\nmyself<span class="token punctuation">.</span>contact<span class="token punctuation">.</span>email <span class="token operator">=</span> <span class="token string">&#39;***&#39;</span>\n<span class="token comment">// 由于观察了内部字段，因此 contact 也算是发生了改变</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output: My phone number is *** and email is ***.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="or" tabindex="-1"><a class="header-anchor" href="#or" aria-hidden="true">#</a> @or</h2><p>只要结构体的待观察字段有一个发生改变，那么就算所有字段都满足条件。<br> 只能用于描述结构体。</p><p>之前都是在所有字段都发生改变时，才算满足执行规则的条件。<br> 现在我们来讲一下，不需要字段全部发生改变，就可以执行规则的情况。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n  intro<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token string">&#39;@or&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Ron&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span> <span class="token comment">// output: My name is Ron, I am a boy.</span>\n\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span> <span class="token comment">// output: My name is Amy, I am a boy.</span>\n\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span> <span class="token comment">// output: My name is Amy, I am a girl.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="同时使用多个规则" tabindex="-1"><a class="header-anchor" href="#同时使用多个规则" aria-hidden="true">#</a> 同时使用多个规则</h2><p>一个结构体上可以定义多个规则。<br> 其中，待观察的字段描述可以相同，也可以不同。 所以，某一个字段被赋值时，可能会同时执行多个规则，执行顺序按照规则定义的顺序，越早定义，越早执行。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n  intro<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  homepage<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateHomepage&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>homepage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://example.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;female&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;male&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      self<span class="token punctuation">.</span>name\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token comment">// 同时执行两个规则，执行顺序为：先生成个人介绍，然后生成个人首页</span>\n<span class="token comment">// output: 1</span>\n<span class="token comment">// output: 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br></div></div><p>即使靠后定义的规则，所观察的字段比之前定义的规则少，也严格按照定义顺序执行。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateHomepage&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment">// 只观察名字</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>homepage <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">https://example.com/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token comment">// 延后设置名字</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\n<span class="token comment">// 同时执行两个规则，执行顺序为：先生成个人介绍，然后生成个人首页</span>\n<span class="token comment">// output: 1</span>\n<span class="token comment">// output: 2</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div><h2 id="outcome" tabindex="-1"><a class="header-anchor" href="#outcome" aria-hidden="true">#</a> outcome</h2><p>获取规则执行的结果。</p>',41),y=(0,p.Uk)("我们推荐将结果作为结构体的字段值，但是某些时候我们依然想获得这个规则执行的结果。"),g=(0,p._)("br",null,null,-1),f=(0,p.Uk)(" 比如，我们需要确认规则是否被执行了，因为规则可能是异步的。"),h=(0,p._)("br",null,null,-1),x=(0,p.Uk)(" 所以 "),w={href:"/api/#outcome",target:"_blank",rel:"noopener noreferrer"},v=(0,p.Uk)("outcome"),M=(0,p.Uk)(" 返回一个 "),S=(0,p._)("code",null,"Promise",-1),A=(0,p.Uk)("。"),$=(0,p.uE)('<div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 在规则执行前，提前预定规则的结果</span>\n<span class="token keyword">const</span> asyncResult <span class="token operator">=</span> <span class="token function">outcome</span><span class="token punctuation">(</span>myself<span class="token punctuation">,</span> <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">await</span> asyncResult <span class="token comment">// done</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>大部分情况，我们更多需要获取的是结构体上的第一个规则执行的结果。<br> 所以，我们提供了一个简便的方式，无需规则名就能获得结果。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> asyncResult <span class="token operator">=</span> <span class="token function">outcome</span><span class="token punctuation">(</span>myself<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token keyword">await</span> asyncResult <span class="token comment">// done</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="structbody" tabindex="-1"><a class="header-anchor" href="#structbody" aria-hidden="true">#</a> structbody</h2><p>用来获取结构体类型的所有字段。</p><p>有些时候结构体的字段类型是匿名的，所以我们提供了此方法来获取字段的类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  contact<span class="token operator">:</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n    email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 获取匿名的字段类型</span>\n<span class="token keyword">const</span> Contact <span class="token operator">=</span> <span class="token function">structbody</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span><span class="token punctuation">.</span>contact\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><h2 id="structof" tabindex="-1"><a class="header-anchor" href="#structof" aria-hidden="true">#</a> structof</h2><p>用来获取结构体实例的类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">structof</span><span class="token punctuation">(</span>myself<span class="token punctuation">)</span> <span class="token operator">===</span> MyStruct<span class="token punctuation">)</span>\n<span class="token comment">// output: true</span>\n\n<span class="token keyword">const</span> DecoratedStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@type&#39;</span><span class="token operator">:</span> MyStruct<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">structof</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>DecoratedStruct<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">===</span> DecoratedStruct<span class="token punctuation">)</span>\n<span class="token comment">// output: true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="自引用的结构体" tabindex="-1"><a class="header-anchor" href="#自引用的结构体" aria-hidden="true">#</a> 自引用的结构体</h2><p>比如需要实现一个链表。</p><p>我们首先需要定义一个空的结构体，然后再定义结构体的字段。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Node <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span>\n  <span class="token punctuation">{</span>\n    next<span class="token operator">:</span> Node<span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  Node\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><p>由于这是一个自引用的结构体，所以初始化时不会自动初始化自引用的字段，不然就会无限循环。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> node <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Node<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>node<span class="token punctuation">)</span>\n<span class="token comment">// output: { next: undefined }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="在修饰结构体上定义规则" tabindex="-1"><a class="header-anchor" href="#在修饰结构体上定义规则" aria-hidden="true">#</a> 在修饰结构体上定义规则</h2><p>我们除了可以直接在结构体上定义规则，也可以在修饰的结构体上定义规则。<br> 这样我们就在不影响原结构体的情况下，赋予结构体更多的自动化能力。</p><p>这符合修饰的准则。</p><h2 id="继承-组合-扩展" tabindex="-1"><a class="header-anchor" href="#继承-组合-扩展" aria-hidden="true">#</a> 继承 &amp; 组合 &amp; 扩展</h2><div class="custom-container warning"><p class="custom-container-title">注意</p><p>如果你熟悉继承，那么这里需要注意了，在这里没有任何的继承关系。<br> 如果你想扩展一个结构体，那么你应该重新定义一个新的结构体，采用组合的方式，将原结构体声明为一个字段。<br> 也正好，这种方式赋予了我们组合多个结构体的能力。并能保持简单清晰，这很有好处。</p></div><h2 id="在实例上定义规则" tabindex="-1"><a class="header-anchor" href="#在实例上定义规则" aria-hidden="true">#</a> 在实例上定义规则</h2><p>我们提出另一个值得思考的问题，如何在一个已经实例化的结构体上定义规则呢？<br> 某些情况下，我们确实需要这种能力，来帮助我们扩展。</p><p>假设可以在结构体实例上定义规则，那么会侵入影响这个实例，永远无法回到原始状态。<br> 所以，系统没有提供这种方法，就是为了保证实例的恒定稳定状态。<br> 不过，我们有更好的方案。</p><p>我们可以定义一个新的结构体，并将这个实例的类型定义为子结构体字段，这样就可以在这个新的结构体上定义规则了。 由于我们可以观察到子结构体的内部字段，所以我们就能在保证实例状态的前提下，非侵入式的实现扩展。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 定义一个临时结构体类型</span>\n<span class="token keyword">const</span> TempStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  ref<span class="token operator">:</span> <span class="token function">structof</span><span class="token punctuation">(</span>myself<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token comment">// 获取实例的类型</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  TempStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;tempRule&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    ref<span class="token operator">:</span> <span class="token punctuation">{</span>\n      name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n      sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> TempStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;female&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;male&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token comment">// 初始化，将原实例附加到这个新的临时结构上</span>\n<span class="token keyword">const</span> temp <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>TempStruct<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  ref<span class="token operator">:</span> myself<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token comment">// 现在，就可以观察到子结构体的变化了</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\n<span class="token comment">// output: Amy female</span>\n\n<span class="token comment">// 解除绑定也很简单</span>\ntemp<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span>\n<span class="token comment">// myself 又回到了原来的状态，仿佛一切都没有发生过</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br></div></div><h2 id="字段类型描述符" tabindex="-1"><a class="header-anchor" href="#字段类型描述符" aria-hidden="true">#</a> 字段类型描述符</h2><p>我们来介绍一些只适用于结构体的字段类型描述符。<br> 这能帮助我们了解结构体的一些特殊能力。</p><h2 id="noinit" tabindex="-1"><a class="header-anchor" href="#noinit" aria-hidden="true">#</a> @noinit</h2><p>强制表明不自动初始化，始终返回 <code>undefined</code>。</p><p>只有用作结构体的字段类型时，才有效。如果直接初始化，会忽略此标志，依然正常返回默认值。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Contact <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@noinit&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  phone<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  email<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n  contact<span class="token operator">:</span> Contact<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// output: { name: &#39;&#39;, sex: false, contact: undefined }</span>\n\n<span class="token comment">// 不过直接初始化类型时，依然能获得正常的默认值。</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Contact<span class="token punctuation">)</span><span class="token punctuation">)</span>\n<span class="token comment">// output: { phone: &#39;&#39;, email: &#39;&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div><p>有些时候，我们并不想在初始化结构体时，默认初始化全部字段，希望某些字段默认为空。<br> 那么我们就可以使用此描述符。</p><h2 id="retain-release" tabindex="-1"><a class="header-anchor" href="#retain-release" aria-hidden="true">#</a> @retain &amp; @release</h2><p>这是一对修饰符，用来修饰类型为 <code>Struct</code> 或 <code>unknown</code> 的字段类型。</p><p>这并不常用，但在某些场景下，这会非常有用并且好用。<br> 比如：引用计数，或者追踪引用情况。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> Ref <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@retain&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>\n    self<span class="token operator">:</span> Struct<span class="token operator">&lt;</span><span class="token punctuation">{</span> count<span class="token operator">:</span> int32 <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    parentStruct<span class="token operator">:</span> Struct<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    fieldName<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>count<span class="token operator">++</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;@release&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>\n    self<span class="token operator">:</span> Struct<span class="token operator">&lt;</span><span class="token punctuation">{</span> count<span class="token operator">:</span> int32 <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n    parentStruct<span class="token operator">:</span> Struct<span class="token operator">&lt;</span>Record<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token punctuation">,</span> <span class="token builtin">unknown</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">,</span>\n    fieldName<span class="token operator">:</span> <span class="token builtin">string</span>\n  <span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>count<span class="token operator">--</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  count<span class="token operator">:</span> int32<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> Container <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  ref<span class="token operator">:</span> Ref<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Ref<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// output: 0</span>\n<span class="token comment">// 这是因为 ref 并为被任何结构体引用，所以计数为 0</span>\n\n<span class="token keyword">const</span> conA <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Container<span class="token punctuation">)</span>\n<span class="token keyword">const</span> conB <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>Container<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>conA<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">,</span> conB<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">,</span> conA<span class="token punctuation">.</span>ref <span class="token operator">!==</span> ref<span class="token punctuation">,</span> conB<span class="token punctuation">.</span>ref <span class="token operator">!==</span> ref<span class="token punctuation">)</span>\n<span class="token comment">// output: 1 1 true true</span>\n<span class="token comment">// 因为 Container 初始化时会默认初始化内部的 Ref，</span>\n<span class="token comment">// 并且会立刻被 Container 所引用，</span>\n<span class="token comment">// 所以 conA.ref.count 为 1</span>\n\n<span class="token keyword">const</span> refA <span class="token operator">=</span> conA<span class="token punctuation">.</span>ref\nconA<span class="token punctuation">.</span>ref <span class="token operator">=</span> ref\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">,</span> refA<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n<span class="token comment">// output: 1 0</span>\n<span class="token comment">// 此时 ref 被 conA 引用了一次，所以 ref.count 为 1</span>\n<span class="token comment">// 由于旧的 refA 被 conA 释放，所以 refA.count 为 0</span>\n\nconB<span class="token punctuation">.</span>ref <span class="token operator">=</span> ref\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">,</span> conA<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">,</span> conB<span class="token punctuation">.</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">)</span>\n<span class="token comment">// output: 2 2 2</span>\n<span class="token comment">// 此时 ref 被 conA 和 conB 引用了 2 次</span>\n\nconA<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// output: 1</span>\nconB<span class="token punctuation">.</span>ref <span class="token operator">=</span> <span class="token keyword">null</span><span class="token operator">!</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>ref<span class="token punctuation">.</span>count<span class="token punctuation">)</span> <span class="token comment">// output: 0</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br></div></div><h2 id="class" tabindex="-1"><a class="header-anchor" href="#class" aria-hidden="true">#</a> @class</h2><p>用来设置结构体的原型为自定义的类。</p><p>这让我们能使用面向对象的方式来使用结构体，可以在结构体上使用方法。<br> 但是如非必要，我们不建议这么做。因为结构体应该保持纯粹性，只用来组织字段。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">class</span> <span class="token class-name">Profile</span> <span class="token punctuation">{</span>\n  name<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">string</span>\n  sex<span class="token operator">?</span><span class="token operator">:</span> <span class="token builtin">boolean</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// 注意：这里不会调用</span>\n    <span class="token comment">// 因为，通过 typeinit 初始化时，我们无法知晓构造参数的状态</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@class&#39;</span><span class="token operator">:</span> Profile<span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n\n<span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;Amy&#39;</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself <span class="token keyword">instanceof</span> <span class="token class-name">Profile</span><span class="token punctuation">)</span> <span class="token comment">// output: true</span>\nmyself<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// output: My name is Amy, I am a girl.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br></div></div><h2 id="change" tabindex="-1"><a class="header-anchor" href="#change" aria-hidden="true">#</a> @change</h2><p>用来标记手动管理数据内部变动情况。<br> 适用于 <code>unknown</code> 类型。</p><p>因为只有 <code>Struct</code> 是可以自动响应变化的，但有些情况下，我们也希望自定义的类型也能具备响应性。<br> 所以，那么我们就需要手动让其具备响应性。</p><p>比如：我们希望数组元素的变动也能触发响应性。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> ReactiveArray <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@type&#39;</span><span class="token operator">:</span> array <span class="token keyword">as</span> TypeDesc<span class="token operator">&lt;</span>int32<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">&gt;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;@change&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token keyword">const</span> ReactiveStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  arr<span class="token operator">:</span> ReactiveArray<span class="token punctuation">,</span>\n  hash<span class="token operator">:</span> int32<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n<span class="token function">ruledef</span><span class="token punctuation">(</span>\n  ReactiveStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;hash&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    arr<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> ReactiveStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> hash <span class="token operator">=</span> <span class="token number">5381</span>\n    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">of</span> self<span class="token punctuation">.</span>arr<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      hash <span class="token operator">+=</span> <span class="token punctuation">(</span>hash <span class="token operator">&lt;&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> v\n    <span class="token punctuation">}</span>\n    self<span class="token punctuation">.</span>hash <span class="token operator">=</span> hash <span class="token operator">|</span> <span class="token number">0</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n<span class="token keyword">const</span> rs <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>ReactiveStruct<span class="token punctuation">)</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> rs<span class="token punctuation">.</span>arr\narr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>\n<span class="token comment">// 因为 arr 没有被重新赋值，所以规则不会执行</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token comment">// output: 0</span>\n\n<span class="token comment">// 手动说明 arr 的内部发生变化了</span>\n<span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token comment">// output: 177573</span>\narr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span>\n<span class="token function">change</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>rs<span class="token punctuation">.</span>hash<span class="token punctuation">)</span> <span class="token comment">// output: 5859910</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br></div></div>',46),I=(0,p.Uk)("内置的 "),R={href:"/api/#carray",target:"_blank",rel:"noopener noreferrer"},C=(0,p.Uk)("CArray"),_=(0,p.Uk)(" 就是使用 "),U={href:"/api/#change",target:"_blank",rel:"noopener noreferrer"},B=(0,p.Uk)("change"),N=(0,p.Uk)(" 和 "),P=(0,p._)("code",null,"Proxy",-1),T=(0,p.Uk)(" 来实现的。"),D=(0,p._)("div",{class:"custom-container warning"},[(0,p._)("p",{class:"custom-container-title"},"提示"),(0,p._)("p",null,"我还是我，但我已经不是原来的那个我了。")],-1),W={render:function(n,s){const a=(0,p.up)("RouterLink"),W=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[t,(0,p._)("p",null,[e,o,c,(0,p.Wm)(a,{to:"/guide/descriptors.html#mock"},{default:(0,p.w5)((()=>[l])),_:1}),u]),r,(0,p._)("p",null,[i,(0,p._)("a",k,[b,(0,p.Wm)(W)]),m]),d,(0,p._)("p",null,[y,g,f,h,x,(0,p._)("a",w,[v,(0,p.Wm)(W)]),M,S,A]),$,(0,p._)("p",null,[I,(0,p._)("a",R,[C,(0,p.Wm)(W)]),_,(0,p._)("a",U,[B,(0,p.Wm)(W)]),N,P,T]),D],64)}}}}]);