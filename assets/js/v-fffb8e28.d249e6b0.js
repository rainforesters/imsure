"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[807],{9570:(a,e,s)=>{s.r(e),s.d(e,{data:()=>n});const n={key:"v-fffb8e28",path:"/guide/",title:"介绍",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"什么是数据结构化编程？",slug:"什么是数据结构化编程",children:[{level:3,title:"过程是导致复杂的原因",slug:"过程是导致复杂的原因",children:[]},{level:3,title:"数据结构化 VS 面向过程",slug:"数据结构化-vs-面向过程",children:[]},{level:3,title:"使用场景",slug:"使用场景",children:[]}]},{level:2,title:"结构、安全、自动化",slug:"结构、安全、自动化",children:[]},{level:2,title:"安装",slug:"安装",children:[]}],filePathRelative:"guide/README.md",git:{updatedTime:1630234208e3}}},5877:(a,e,s)=>{s.r(e),s.d(e,{default:()=>t});const n=(0,s(6252).uE)('<h1 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍" aria-hidden="true">#</a> 介绍</h1><p><strong>rainforest-js</strong> 是 <a href="#%E7%BB%93%E6%9E%84%E3%80%81%E5%AE%89%E5%85%A8%E3%80%81%E8%87%AA%E5%8A%A8%E5%8C%96">结构、安全、自动化</a> 的类型描述系统，用于使用数据结构化编程。</p><p>它可以马上应用于你的任何现有项目中，无需修改任何部分，没有任何限制。</p><h2 id="什么是数据结构化编程" tabindex="-1"><a class="header-anchor" href="#什么是数据结构化编程" aria-hidden="true">#</a> 什么是数据结构化编程？</h2><p>当输入数据准备好时，自动执行预期规则，获得预期输出结果的编程方式。</p><p>这种新的编程方式，可以解放思维，无需关心数据的具体生成过程，只关心预期结果。</p><h3 id="过程是导致复杂的原因" tabindex="-1"><a class="header-anchor" href="#过程是导致复杂的原因" aria-hidden="true">#</a> 过程是导致复杂的原因</h3><p>实际上过程本身就是复杂的，一直都是。<br> 少量的过程是可以阅读并理解的，而过多的过程是难以理解的。<br> 更令人悲伤的是，过程一般是无法精简的，所以过程总是难以阅读理解的。</p><p>这就是面向过程编程的本质复杂性，无法避免。</p><h3 id="数据结构化-vs-面向过程" tabindex="-1"><a class="header-anchor" href="#数据结构化-vs-面向过程" aria-hidden="true">#</a> 数据结构化 VS 面向过程</h3><p>数据结构化的行为是：准备需要的数据，获得预期结果。<br> 唯一需要做的工作，就是提供数据。一旦数据都准备好，就能获得结果。<br> 具体实现过程是无需关心的，也就是无需思考复杂的部分。</p><h3 id="使用场景" tabindex="-1"><a class="header-anchor" href="#使用场景" aria-hidden="true">#</a> 使用场景</h3><p>常用的场景包括但不限于：</p><ul><li>用于封装模块对接部分</li><li>用于编排组合各个模块协同工作</li><li>通过编排组合模块，实现程序的最终交付</li><li>...</li></ul><h2 id="结构、安全、自动化" tabindex="-1"><a class="header-anchor" href="#结构、安全、自动化" aria-hidden="true">#</a> 结构、安全、自动化</h2><p><strong>结构：</strong> 将结构体（视为配置文件）作为模块的接口，通过编排字段来控制模块的行为，<br> 易于组织出层次清晰的大型程序。</p><p><strong>安全：</strong> 类型描述用来保障实际的输入值符合预期结果。</p><p><strong>自动化：</strong> 当期待的数据准备好时，自动触发程序，生成交付结果。</p><h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><p>使用 npm 安装</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code><span class="token function">npm</span> <span class="token function">install</span> rainforest-js\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>或在浏览器中使用</p><div class="language-html ext-html line-numbers-mode"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>https://unpkg.com/rainforest-js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',23),t={render:function(a,e){return n}}}}]);