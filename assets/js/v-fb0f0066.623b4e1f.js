"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[170],{3866:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-fb0f0066",path:"/guide/getting-started.html",title:"快速开始",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"定义结构体",slug:"定义结构体",children:[]},{level:2,title:"初始化结构体",slug:"初始化结构体",children:[]},{level:2,title:"定义规则，实现自动化",slug:"定义规则-实现自动化",children:[]}],filePathRelative:"guide/getting-started.md",git:{updatedTime:1630234208e3}}},1092:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="快速开始" tabindex="-1"><a class="header-anchor" href="#快速开始" aria-hidden="true">#</a> 快速开始</h1><p>这里通过一个简单的示例，来快速掌握结构体的用法。体验数据结构化编程的魅力。</p><h2 id="定义结构体" tabindex="-1"><a class="header-anchor" href="#定义结构体" aria-hidden="true">#</a> 定义结构体</h2><p>首先来定义一个简单的结构体。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> MyStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n  sex<span class="token operator">:</span> bool<span class="token punctuation">,</span>\n  age<span class="token operator">:</span> int32<span class="token punctuation">,</span>\n  intro<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div><h2 id="初始化结构体" tabindex="-1"><a class="header-anchor" href="#初始化结构体" aria-hidden="true">#</a> 初始化结构体</h2><p>然后初始化我们定义的结构体。<br> 所有字段都会自动初始化为类型的默认值。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">)</span>\n<span class="token comment">// output: { name: &#39;&#39;, sex: false, age: 0, intro: &#39;&#39; }</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="定义规则-实现自动化" tabindex="-1"><a class="header-anchor" href="#定义规则-实现自动化" aria-hidden="true">#</a> 定义规则，实现自动化</h2><p>先为结构体定义规则。<br> 期望当名字、性别、年龄发生变化时，自动生成个人介绍。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token function">ruledef</span><span class="token punctuation">(</span>\n  MyStruct<span class="token punctuation">,</span>\n  <span class="token string">&#39;generateIntroduction&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    <span class="token comment">// 声明需要观察的字段</span>\n    name<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    sex<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    age<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">(</span>self<span class="token operator">:</span> <span class="token keyword">type</span>init<span class="token operator">&lt;</span><span class="token keyword">typeof</span> MyStruct<span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    self<span class="token punctuation">.</span>intro <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">My name is </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">, I am a </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>\n      self<span class="token punctuation">.</span>sex <span class="token operator">?</span> <span class="token string">&#39;girl&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;boy&#39;</span>\n    <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> and I am </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>self<span class="token punctuation">.</span>age<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> years old.</span><span class="token template-punctuation string">`</span></span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>然后初始化结构体，并为字段赋值。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> myself <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>MyStruct<span class="token punctuation">)</span>\nmyself<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\nmyself<span class="token punctuation">.</span>sex <span class="token operator">=</span> <span class="token boolean">true</span>\nmyself<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">18</span>\n<span class="token comment">// 此时，预期的名字、性别、年龄发生变化了，</span>\n<span class="token comment">// 将会自动执行规则，生成个人介绍。</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>myself<span class="token punctuation">.</span>intro<span class="token punctuation">)</span>\n<span class="token comment">// output: My name is Amy, I am a girl and I am 18 years old.</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div><p>我们并没有手动执行规则来生成个人介绍，一切都是自动完成的。<br> 这让我们能专注于编排数据结构，即可获得目标结果，而不用控制复杂的过程。</p><div class="custom-container warning"><p class="custom-container-title">提示</p><p>规则是何时执行的？<br> 当预期的最后一个字段变化时，会自动执行规则。<br> 也就是表明：<strong>当预期的字段数据都准备好时，会自动执行规则。</strong></p></div>',15),t={render:function(n,s){return p}}}}]);