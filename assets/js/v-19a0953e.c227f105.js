"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[178],{9004:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-19a0953e",path:"/guide/descriptors.html",title:"类型描述符",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"@type",slug:"type",children:[]},{level:2,title:"@value",slug:"value",children:[]},{level:2,title:"@mock",slug:"mock",children:[]},{level:2,title:"@verify",slug:"verify",children:[]},{level:2,title:"@adjust",slug:"adjust",children:[]},{level:2,title:"@init",slug:"init",children:[]},{level:2,title:"@notnil",slug:"notnil",children:[]}],filePathRelative:"guide/descriptors.md",git:{updatedTime:1630234208e3}}},2004:(n,s,a)=>{a.r(s),a.d(s,{default:()=>d});var e=a(6252);const p=(0,e.uE)('<h1 id="类型描述符" tabindex="-1"><a class="header-anchor" href="#类型描述符" aria-hidden="true">#</a> 类型描述符</h1><p>我们定义了一些描述符来描述类型。<br> 描述符以 <code>@</code> 开头。</p><p>下面我们将介绍部分通用描述符。</p><h2 id="type" tabindex="-1"><a class="header-anchor" href="#type" aria-hidden="true">#</a> @type</h2><p>指定待修饰的原有类型。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> int8 <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@type&#39;</span><span class="token operator">:</span> int32<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>也可以是已经定义的结构体。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> DecoratedStruct <span class="token operator">=</span> <span class="token keyword">type</span><span class="token function">def</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token string">&#39;@type&#39;</span><span class="token operator">:</span> MyStruct<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">提示</p><p>一般需要和其他描述符一起使用，不然没有意义。</p></div><h2 id="value" tabindex="-1"><a class="header-anchor" href="#value" aria-hidden="true">#</a> @value</h2><p>当类型初始化时，返回默认值。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token string">&#39;@value&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;amy@example.com&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>如果是一个修饰类型，那么也可以对值进行再次修饰。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token string">&#39;@value&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> val <span class="token operator">+</span> <span class="token string">&#39;.cn&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><div class="custom-container warning"><p class="custom-container-title">注意</p><p>这只作用于没有使用字面量的情况，仅仅初始化类型。<br> 因为，这能确保修饰链的可靠性。</p></div><h2 id="mock" tabindex="-1"><a class="header-anchor" href="#mock" aria-hidden="true">#</a> @mock</h2><p>当类型初始化时，返回模拟的默认值。</p><p>我们开发程序时，总会需要模拟一些数据来方便开发。<br> 以往，我们不容易模拟一些数据来使用，现在，我们提供了这种简单的方法来生成模拟数据。</p><p>当然，你也可以配合模拟框架来生成模拟数据。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token string">&#39;@mock&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token number">0</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>我们可以很简单的生成模拟数据，这非常容易。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token comment">// 我们使用 wrapval({ &#39;@mock&#39;: true }) 来生成模拟的数据</span>\n<span class="token builtin">console</span><span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">type</span><span class="token function">init</span><span class="token punctuation">(</span>int32<span class="token punctuation">,</span> <span class="token function">wrapval</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token string">&#39;@mock&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div>',22),t=(0,e.Uk)("我们使用 "),c={href:"/api/#wrapval",target:"_blank",rel:"noopener noreferrer"},o=(0,e.Uk)("wrapval"),l=(0,e.Uk)(" 来将描述和原始值包装在一起。"),r=(0,e._)("br",null,null,-1),i=(0,e.Uk)(" 这里只需要描述来表明生成模拟数据，所以原始值是可以忽略的。"),u=(0,e.uE)('<h2 id="verify" tabindex="-1"><a class="header-anchor" href="#verify" aria-hidden="true">#</a> @verify</h2><p>用来自定义校验规则。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token string">&#39;@verify&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">unknown</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// 校验值是否符合预期规则，</span>\n  <span class="token comment">// 如果不符合，应抛出错误。</span>\n  <span class="token keyword">throw</span> <span class="token function">Error</span><span class="token punctuation">(</span><span class="token string">&#39;Invalid value&#39;</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div><p>推荐的做法为，不要用于结构体上，应该只用于描述基本类型。<br> 如果希望校验结构体的字段，那么应该直接修饰于字段的类型上。<br> 这样才能保证结构体的字段明确性、直观性。</p><h2 id="adjust" tabindex="-1"><a class="header-anchor" href="#adjust" aria-hidden="true">#</a> @adjust</h2><p>用来对数据进行修正。</p><p>某些情况下，接收到的数据可能并不那么标准，但是也是可以兼容的。<br> 所以，我们可以对其修正，来标准化统一数据。</p><p>比如，自动去除字符串的前后空白字符。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token string">&#39;@adjust&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> val<span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><h2 id="init" tabindex="-1"><a class="header-anchor" href="#init" aria-hidden="true">#</a> @init</h2><p>当类型初始化时，用来对默认值进行一些额外操作。<br> 这是唯一的生命周期函数。在 <a href="#value">@value</a> 或 <a href="#mock">@mock</a> 之后，只会执行一次。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token string">&#39;@init&#39;</span><span class="token operator">:</span> <span class="token punctuation">(</span>val<span class="token operator">:</span> Struct<span class="token operator">&lt;</span><span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token punctuation">}</span><span class="token operator">&gt;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span> <span class="token comment">// 注意：没有返回值</span>\n  val<span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Amy&#39;</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>只有当数据不为 <code>null</code> 或 <code>undefined</code> 时才会执行。</p><p>因为没有返回值，所以只对 <code>Struct</code> 或 <code>unknown</code> 的类型及其修饰才有意义。</p><h2 id="notnil" tabindex="-1"><a class="header-anchor" href="#notnil" aria-hidden="true">#</a> @notnil</h2><p>用来约束数据值不能为空： <code>null</code> 或 <code>undefined</code>。</p><p>如果值为空，将会抛出错误。所以，这能保障安全性。</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token string">&#39;@notnil&#39;</span><span class="token operator">:</span> <span class="token boolean">true</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div>',18),d={render:function(n,s){const a=(0,e.up)("OutboundLink");return(0,e.wg)(),(0,e.iD)(e.HY,null,[p,(0,e._)("p",null,[t,(0,e._)("a",c,[o,(0,e.Wm)(a)]),l,r,i]),u],64)}}}}]);