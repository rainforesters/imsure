(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{368:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"类型描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#类型描述"}},[t._v("#")]),t._v(" 类型描述")]),t._v(" "),a("h2",{attrs:{id:"什么是类型描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#什么是类型描述"}},[t._v("#")]),t._v(" 什么是类型描述")]),t._v(" "),a("p",[t._v("类型描述是：为类型添加描述规则，用来控制运行期间的行为。")]),t._v(" "),a("p",[t._v("类型的概念不再赘述。几乎所有语言都是由基本的几种类型构成的。")]),t._v(" "),a("p",[t._v("JavaScript 是动态语言，变量是没有类型的，然后有了 TypeScript 为变量表达类型。"),a("br"),t._v("\n类型作为约束存在于静态检查期间，同样的，几乎所有的静态语言都会在编译期间进行类型擦除，类型的使命一般到此结束，不严格存在于运行期间。")]),t._v(" "),a("p",[t._v("可以看到，类型的主要作用就是在静态检查期间提供约束。")]),t._v(" "),a("p",[t._v("由于类型擦除，我们不能控制类型运行期间的行为，类型的意义被减弱了。"),a("br"),t._v("\n比如，我们无法控制变量 "),a("code",[t._v("email: string")]),t._v(" 只接收正确的字符串。\n只能在接收到字符串后，再手动进行检查校验。\n唯一的意义就是表明 "),a("code",[t._v("email")]),t._v(" 只用于接收任何字符串，而不能是布尔、数值等其他类型的值。")]),t._v(" "),a("p",[t._v("所以，我们需要有一个在运行期间能够发挥效用的类型系统。"),a("br"),t._v("\n类型描述，就是我们对此的实现，用来构造出这个有效的安全类型系统。")]),t._v(" "),a("p",[t._v("现在，我们可以"),a("strong",[t._v("安全")]),t._v("的这样来使用了。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 首先，定义一个新的类型描述")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" Email "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typedef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 修饰原始的 string")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@verify'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 自定义校验")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// W3C Email Regex")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("^[a-zA-Z0-9.!#$%&’*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$")]),a("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("&&")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("!")]),a("span",{pre:!0,attrs:{class:"token constant"}},[t._v("RE")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("Error")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Invalid email address.'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 定义结构体")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" MyStruct "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typedef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  email"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" Email"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 实例化，然后设置邮箱")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myself "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typeinit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyStruct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nmyself"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'amy@example.com'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// It's ok.")]),t._v("\nmyself"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("email "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'amy@example,com'")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// Throw the error.")]),t._v("\n")])])]),a("p",[t._v("这样就能保障我们的数据，总是正确的，符合预期的。"),a("br"),t._v("\n也因此，让我们能安全的构造大型程序。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("这里我们不考虑运行期间的类型反射。")])]),t._v(" "),a("h2",{attrs:{id:"基本类型描述"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#基本类型描述"}},[t._v("#")]),t._v(" 基本类型描述")]),t._v(" "),a("p",[t._v("系统原生提供了几个最基本的类型描述。"),a("br"),t._v("\n这就足以用来描述整个世界了。"),a("br"),t._v("\n因为，我们可以通过再次修饰，来修饰出多样化的各种类型描述。")]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("基本类型描述")]),t._v(" "),a("th",{staticStyle:{"text-align":"center"}},[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("unknown")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("未知类型")])]),t._v(" "),a("tr",[a("td",[t._v("bool")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("布尔类型")])]),t._v(" "),a("tr",[a("td",[t._v("int32")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("整型")])]),t._v(" "),a("tr",[a("td",[t._v("float64")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("浮点型")])]),t._v(" "),a("tr",[a("td",[t._v("string")]),t._v(" "),a("td",{staticStyle:{"text-align":"center"}},[t._v("字符串")])])])]),t._v(" "),a("p",[t._v("比如，我们可以很容易的修饰出一个 "),a("code",[t._v("int8")]),t._v(" 类型描述。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" int8 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typedef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@verify'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("number")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("if")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("||")]),t._v(" val "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("128")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n      "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("throw")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("TypeError")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'int8 overflow'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),a("p",[t._v("为方便阅读，后续的类型描述统一简称为类型。")])]),t._v(" "),a("h2",{attrs:{id:"struct-类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#struct-类型"}},[t._v("#")]),t._v(" Struct 类型")]),t._v(" "),a("p",[t._v("除了基本类型之外，我们提供了一个简单但强大的结构体类型。")]),t._v(" "),a("p",[a("strong",[t._v("毫不客气的讲，这是数据结构化编程的灵魂。")])]),t._v(" "),a("p",[a("a",{attrs:{href:"./struct"}},[t._v("我们在新的章节里详细学习它。")])]),t._v(" "),a("h2",{attrs:{id:"定义新类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#定义新类型"}},[t._v("#")]),t._v(" 定义新类型")]),t._v(" "),a("p",[t._v("使用 "),a("RouterLink",{attrs:{to:"/api/#typedef"}},[t._v("typedef")]),t._v(" 来定义一个新的类型。"),a("br"),t._v("\n定义的新类型分为两种，一种是结构体，一种是对原有类型的再次修饰类型。")],1),t._v(" "),a("h3",{attrs:{id:"结构体"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#结构体"}},[t._v("#")]),t._v(" 结构体")]),t._v(" "),a("p",[t._v("结构体就是由一个或多个字段组成的集合。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" MyStruct "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typedef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("string")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" bool"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("h3",{attrs:{id:"修饰类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#修饰类型"}},[t._v("#")]),t._v(" 修饰类型")]),t._v(" "),a("p",[t._v("对一个已经定义好的类型再次进行修饰，就是一个修饰类型。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" int8 "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typedef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" int32"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("可以看到，修饰类型和结构体的区别就是指定 "),a("RouterLink",{attrs:{to:"/guide/descriptors.html#type"}},[t._v("@type")]),t._v(" 描述符来表明原有的类型。")],1),t._v(" "),a("p",[t._v("当然了，我们也可以对结构体进行修饰。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" DecoratedStruct "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typedef")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'@type'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" MyStruct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])]),a("p",[t._v("不过，需要注意的是，一旦结构体被定义，那么字段就固定下来了，所以不能在修饰中添加新的字段。"),a("br"),t._v("\n这是因为，我们要保证原有结构体的确定性。"),a("br"),t._v("\n因为该结构体可能会被多次修饰，所以我们需要保证在经过多次修饰后，该结构体还是原来的样子。\n这样才能放心安全的的使用。")]),t._v(" "),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"custom-block-title"},[t._v("注意")]),t._v(" "),a("p",[t._v("如果你熟悉继承，那么这里需要注意了，在这里没有任何的继承关系。"),a("br"),t._v("\n如果你想扩展一个结构体，那么你应该重新定义一个新的结构体，采用组合的方式，将原结构体声明为一个字段。"),a("br"),t._v("\n也正好，这种方式赋予了我们组合多个结构体的能力。并能保持简单清晰，这很有好处。")])]),t._v(" "),a("h2",{attrs:{id:"初始化类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#初始化类型"}},[t._v("#")]),t._v(" 初始化类型")]),t._v(" "),a("p",[t._v("使用 "),a("RouterLink",{attrs:{to:"/api/#typeinit"}},[t._v("typeinit")]),t._v(" 来初始化类型的值。"),a("br"),t._v("\n主要用来初始化结构体。当然也可以直接初始化其他基本类型，但不常用。")],1),t._v(" "),a("p",[t._v("初始化结构体时，所有字段都会自动初始化为类型的默认值。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myself "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typeinit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyStruct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin"}},[t._v("console")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("myself"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// output: { name: '', sex: false }")]),t._v("\n")])])]),a("p",[t._v("我们也可以在初始化的同时为字段赋值。")]),t._v(" "),a("div",{staticClass:"language-ts extra-class"},[a("pre",{pre:!0,attrs:{class:"language-ts"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" myself "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("typeinit")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("MyStruct"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  name"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Amy'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  sex"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("true")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);